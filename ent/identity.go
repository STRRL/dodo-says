// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/strrl/dodo-says/ent/identity"
)

// Identity is the model entity for the Identity schema.
type Identity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Identity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identity.FieldID:
			values[i] = new(sql.NullInt64)
		case identity.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Identity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Identity fields.
func (i *Identity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case identity.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case identity.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Identity.
// Note that you need to call Identity.Unwrap() before calling this method if this Identity
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Identity) Update() *IdentityUpdateOne {
	return (&IdentityClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Identity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Identity) Unwrap() *Identity {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Identity is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Identity) String() string {
	var builder strings.Builder
	builder.WriteString("Identity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Identities is a parsable slice of Identity.
type Identities []*Identity

func (i Identities) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
